 package services;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Optional;

import javax.ws.rs.Consumes;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import OLR.database.BNFConnector;


@Path("/nodes/")
public class Nodes {
	@POST
	@Produces(MediaType.APPLICATION_JSON)
	@Consumes(MediaType.APPLICATION_JSON)
	@Path("")
	public Response create_division(@QueryParam("id") int db_id) {

		Optional<Connection> c = null;
		try {
			c = BNFConnector.getOLRConnection();
			if (!ofr_conn.isPresent()) {
				return ResponseHelper.get500("Could not connect to the DB");
			}

			AuthedResponse j = DivisionQueries.createDivision(submission, ofr_conn.get());

			return ResponseHelper.get200(j, MediaType.APPLICATION_JSON_TYPE);

		} catch (SQLException se) {
			se.printStackTrace();
			return ResponseHelper.get500("SQL exception thrown\n" + se.getMessage());
		} catch (Exception e) {

			e.printStackTrace();
			return ResponseHelper.get500("Exception thrown \n" + e.getMessage());
		} finally {
			if (ofr_conn != null && ofr_conn.isPresent()) {
				try {
					ofr_conn.get().close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}
	}
}

class NodeQueries {
	
	public static Optional<Integer> getUserID(String emailOrUsername, Connection olr_conn) throws SQLException {
		PreparedStatement ps = olr_conn.prepareStatement("select id from user where email = ? or username = ?");
		ps.setString(1, emailOrUsername);
		ps.setString(2, emailOrUsername);

		ResultSet rs = ps.executeQuery();

		if (rs.next()) {
			return Optional.of(rs.getInt("id"));
		} else {
			return Optional.empty();
		}

	}
}
