package algorithm.objects;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import org.json.simple.parser.ParseException;

public abstract class Entity {

	//public int entity_id;
	public String type;
	public int id=0;

	public ClinicianDecision1 clinician_decision_1;
	public ConditionDecision1  condition_decision_1;
	public ConsiderMedication1 consider_medication_1;
	public ConsiderMedication2 consider_medication_2;
	public MedicationChoice1 medication_choice_1;
	public MedicationContraindicationDecision1 medication_contraindication_decision_1;
	public MedicationContraindicationDecision2 medication_contraindication_decision_2;
	public MedicationNotToleratedDecision1 medication_not_tolerated_decision_1;
	public MedicationNotToleratedDecision2 medication_not_tolerated_decision_2;
	public ObservationDecision1 observation_decision_1;
	public OfferMedication1 offer_medication_1;
	public SetAlert1 set_alert_1;
	public SetAlert2 set_alert_2;
	public SetGoal1 set_goal_1;
	public StopMedication1 stop_medication_1;
	
	public Entity(String type) {
		super();
		this.type = type;
	}

	public static Entity create(int entity_id, Connection c) throws SQLException, ParseException {

		PreparedStatement ps = c.prepareStatement("select * from algorithm_entity where id = ?");
		ps.setInt(1, entity_id);

		ResultSet rs = ps.executeQuery();
		rs.next();

		EntityType type = EntityType.getType(rs.getString("type"));

		switch (type) {
		case CLINICIAN_DECISION_1: {

			ClinicianDecision1
		}
		case CONDITION_DECISION_1: {

			return new ConditionDecision1(c, entity_id);
		}
		case CONSIDER_MEDICATION_1: {

			return new ConsiderMedication1(c, entity_id);
		}
		case CONSIDER_MEDICATION_2: {

			return new ConsiderMedication2(c, entity_id);
		}
		case MEDICATION_CHOICE_1: {

			return new MedicationChoice1(c, entity_id);
		}
		case MEDICATION_CONTRAINDICATION_DECISION_1: {

			return new MedicationContraindicationDecision1(c, entity_id);
		}
		case MEDICATION_CONTRAINDICATION_DECISION_2: {

			return new MedicationContraindicationDecision2(c, entity_id);
		}
		case MEDICATION_NOT_TOLERATED_1: {

			return new MedicationNotToleratedDecision1(c, entity_id);
		}
		case MEDICATION_NOT_TOLERATED_2: {

			return new MedicationNotToleratedDecision2(c, entity_id);
		}
		case OBSERVATION_DECISION_1: {

			return new ObservationDecision1(c, entity_id);
		}
		case OFFER_MEDICATION_1: {

			return new OfferMedication1(c, entity_id);
		}
		case SET_ALERT_1: {

			return new SetAlert1(c, entity_id);
		}
		case SET_ALERT_2: {

			return new SetAlert2(c, entity_id);
		}
		case SET_GOAL_1: {

			return new SetGoal1(c, entity_id);
		}
		case STOP_MEDICATION_1: {
			return new StopMedication1(c, entity_id);
		}

		default:
			throw new IllegalArgumentException("Unexpected value: " + type);
		}

	}

}
