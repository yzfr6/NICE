package algorithm.objects;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public abstract class Entity {

	public int id;
	public EntityType type;

	public Entity(int id, EntityType type) {
		super();
		this.id = id;
		this.type = type;
	}

	public Entity(int id) {
		super();
		this.id = id;
	}

	public static Entity create(int entity_id, Connection c) throws SQLException {

		PreparedStatement ps = c.prepareStatement("select * from algorithm_entity where id = ?");
		ps.setInt(1, entity_id);

		ResultSet rs = ps.executeQuery();
		rs.next();

		EntityType type = EntityType.getType(rs.getString("type"));

		switch (type) {
		case CLINICIAN_DECISION_1: {

			return new ClinicianDecision1(entity_id);
		}
		case CONDITION_DECISION_1: {

			return new ClinicianDecision1(entity_id);
		}
		case CONSIDER_MEDICATION_1: {

			return new ClinicianDecision1(entity_id);
		}
		case CONSIDER_MEDICATION_2: {

			return new ClinicianDecision1(entity_id);
		}
		case MEDICATION_CHOICE_1: {

			return new ClinicianDecision1(entity_id);
		}
		case MEDICATION_CONTRAINDICATION_DECISION_1: {

			return new ClinicianDecision1(entity_id);
		}
		case MEDICATION_CONTRAINDICATION_DECISION_2: {

			return new ClinicianDecision1(entity_id);
		}
		case MEDICATION_NOT_TOLERATED_1: {

			return new ClinicianDecision1(entity_id);
		}
		case MEDICATION_NOT_TOLERATED_2: {

			return new ClinicianDecision1(entity_id);
		}
		case OBSERVATION_DECISION_1: {

			return new ClinicianDecision1(entity_id);
		}
		case OFFER_MEDICATION_1: {

			return new ClinicianDecision1(entity_id);
		}
		case SET_ALERT_1: {

			return new ClinicianDecision1(entity_id);
		}
		case SET_ALERT_2: {

			return new ClinicianDecision1(entity_id);
		}
		case SET_GOAL_1: {

			return new ClinicianDecision1(entity_id);
		}
		case STOP_MEDICATION_1: {

		}

		default:
			throw new IllegalArgumentException("Unexpected value: " + type);
		}

	}

}
